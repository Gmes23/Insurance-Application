{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gm/Desktop/Programming/Javascript/Nest/client/components/UserForm.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Form from 'react-bootstrap/Form';\nimport { Row, Col, Grid } from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button'; // const UserInfo = [\n//     {link: \"/\", name: \"Program\"},\n//     {link: \"/info\", name: \"Info\"},\n//     {link: \"/booking\", name: \"Booking\"},\n//     {link: \"/FAQ\", name: \"FAQ\"},\n//     {link: \"/contact\", name: \"Contact\"},\n//   ]\n//   const UILink = ({link, name}) => \n//     <LI_list>\n//       <Alink to={link} onClick={this.toggleExpandedMenu}> {name} </Alink> <Span />\n//     </LI_list>\n//   const UILinkContainer = () => routes.map(UILink)\n\nvar UserForm = /*#__PURE__*/function (_React$Component) {\n  _inherits(UserForm, _React$Component);\n\n  var _super = _createSuper(UserForm);\n\n  function UserForm(props) {\n    var _this;\n\n    _classCallCheck(this, UserForm);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      first_name: '',\n      last_name: '',\n      email_address: '',\n      phone_number: '',\n      company_name: '',\n      status: 'pending',\n      primary_al: false,\n      primary_gl: false,\n      primary_el: false\n    };\n    _this.onChange = _this.onChange.bind(_assertThisInitialized(_this));\n    _this.handleInputChange = _this.handleInputChange.bind(_assertThisInitialized(_this)); // this.checkUserExists = this.checkUserExists.bind(this);\n\n    return _this;\n  }\n\n  _createClass(UserForm, [{\n    key: \"onChange\",\n    value: function onChange(e) {\n      this.setState(_defineProperty({}, e.target.name, e.target.value));\n      console.log(this.state, e.target.name, 'this state from login');\n    }\n  }, {\n    key: \"handleInputChange\",\n    value: function handleInputChange(e) {\n      var booleanTargetNames = [\"primary_al\", \"primary_gl\", \"primary_el\"];\n      var target = e.target; // If this a boolean target (checkbox toggle) return it's \"checked\" property\n      // Else it's a regular input so we should read the \"value\" property\n\n      var value = booleanTargetNames.includes(target.name) ? target.checked : target.value;\n      var name = target.name;\n      this.setState(_defineProperty({}, name, value));\n      console.log(this.state, 'this might be giving the inverse state');\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(e) {\n      e.preventDefault();\n      console.log(\"its hitting onSubmit\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }\n      }, __jsx(Form, {\n        onSubmit: this.onSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }\n      }, __jsx(Form.Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }\n      }, __jsx(Form.Group, {\n        as: Col,\n        controlId: \"formGridName\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }\n      }, __jsx(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 29\n        }\n      }, \"First Name\"), __jsx(Form.Control, {\n        type: \"name\",\n        placeholder: \"First Name\",\n        name: \"first_name\",\n        onChange: this.onChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 29\n        }\n      })), __jsx(Form.Group, {\n        as: Col,\n        controlId: \"formGridLastName\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }\n      }, __jsx(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 29\n        }\n      }, \"Last Name\"), __jsx(Form.Control, {\n        type: \"lastName\",\n        placeholder: \"Last name\",\n        name: \"last_name\",\n        onChange: this.onChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 29\n        }\n      }))), __jsx(Form.Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }\n      }, __jsx(Form.Group, {\n        as: Col,\n        controlId: \"formGridEmail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }\n      }, __jsx(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 29\n        }\n      }, \"Email\"), __jsx(Form.Control, {\n        type: \"email\",\n        placeholder: \"Enter email\",\n        name: \"email_address\",\n        onChange: this.onChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 29\n        }\n      })), __jsx(Form.Group, {\n        as: Col,\n        controlId: \"formGridPhoneNumber\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }\n      }, __jsx(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }\n      }, \"Phone Number\"), __jsx(Form.Control, {\n        type: \"phone_number\",\n        placeholder: \"Phone number\",\n        name: \"phone_number\",\n        onChange: this.onChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }\n      }))), __jsx(Form.Group, {\n        controlId: \"formGridAddress1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }\n      }, __jsx(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }\n      }, \"Company Name\"), __jsx(Form.Control, {\n        placeholder: \"Company Name\",\n        name: \"company_name\",\n        onChange: this.onChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }\n      })), __jsx(Form.Group, {\n        id: \"formGridCheckbox\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }\n      }, __jsx(Form.Check, {\n        type: \"checkbox\",\n        label: \"primary_al\",\n        name: \"primary_al\",\n        checked: this.state.primary_al,\n        onChange: this.handleInputChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }\n      })), __jsx(Form.Group, {\n        id: \"formGridCheckbox\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }\n      }, __jsx(Form.Check, {\n        type: \"checkbox\",\n        label: \"Check me out\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }\n      })), __jsx(Form.Group, {\n        id: \"formGridCheckbox\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }\n      }, __jsx(Form.Check, {\n        type: \"checkbox\",\n        label: \"Check me out\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 25\n        }\n      })), __jsx(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }\n      }, \"Submit\")));\n    }\n  }]);\n\n  return UserForm;\n}(React.Component);\n\nexport default UserForm;","map":{"version":3,"sources":["/Users/gm/Desktop/Programming/Javascript/Nest/client/components/UserForm.js"],"names":["Form","Row","Col","Grid","Button","UserForm","props","state","first_name","last_name","email_address","phone_number","company_name","status","primary_al","primary_gl","primary_el","onChange","bind","handleInputChange","e","setState","target","name","value","console","log","booleanTargetNames","includes","checked","preventDefault","onSubmit","React","Component"],"mappings":"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","sourcesContent":["import Form from 'react-bootstrap/Form';\nimport { Row, Col, Grid } from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button';\n\n// const UserInfo = [\n//     {link: \"/\", name: \"Program\"},\n//     {link: \"/info\", name: \"Info\"},\n//     {link: \"/booking\", name: \"Booking\"},\n//     {link: \"/FAQ\", name: \"FAQ\"},\n//     {link: \"/contact\", name: \"Contact\"},\n//   ]\n\n//   const UILink = ({link, name}) => \n//     <LI_list>\n//       <Alink to={link} onClick={this.toggleExpandedMenu}> {name} </Alink> <Span />\n//     </LI_list>\n\n//   const UILinkContainer = () => routes.map(UILink)\n\nclass UserForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            first_name: '',\n            last_name: '',\n            email_address: '',\n            phone_number: '',\n            company_name: '',\n            status: 'pending',\n            primary_al: false,\n            primary_gl: false,\n            primary_el: false,\n        }\n\n        this.onChange = this.onChange.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        // this.checkUserExists = this.checkUserExists.bind(this);\n    }\n\n    onChange(e) {\n        this.setState({ [e.target.name]: e.target.value });\n        console.log(this.state, e.target.name, 'this state from login')\n    }\n    handleInputChange(e) {\n        const booleanTargetNames = [\"primary_al\", \"primary_gl\", \"primary_el\"];\n        const target = e.target;\n        // If this a boolean target (checkbox toggle) return it's \"checked\" property\n        // Else it's a regular input so we should read the \"value\" property\n        const value = booleanTargetNames.includes(target.name)\n          ? target.checked\n          : target.value;\n        const name = target.name;\n        this.setState({\n          [name]: value\n        });\n        console.log(this.state, 'this might be giving the inverse state');\n      }\n    \n\n    onSubmit(e) {\n        e.preventDefault();\n        console.log(\"its hitting onSubmit\")\n    }\n\n    render() {\n        return (\n            <div>\n                <Form onSubmit={this.onSubmit}>\n\n                    <Form.Row>\n\n                        <Form.Group as={Col} controlId=\"formGridName\">\n                            <Form.Label>First Name</Form.Label>\n                            <Form.Control type=\"name\" placeholder=\"First Name\"  name=\"first_name\" onChange={this.onChange}/>\n                        </Form.Group>\n\n                        <Form.Group as={Col} controlId=\"formGridLastName\">\n                            <Form.Label>Last Name</Form.Label>\n                            <Form.Control type=\"lastName\" placeholder=\"Last name\" name=\"last_name\" onChange={this.onChange} />\n                        </Form.Group>\n                    </Form.Row>\n\n\n                    <Form.Row>\n\n                        <Form.Group as={Col} controlId=\"formGridEmail\">\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control type=\"email\" placeholder=\"Enter email\" name=\"email_address\" onChange={this.onChange}/>\n                        </Form.Group>\n\n                    <Form.Group as={Col} controlId=\"formGridPhoneNumber\">\n                        <Form.Label>Phone Number</Form.Label>\n                        <Form.Control \n                            type=\"phone_number\" \n                            placeholder=\"Phone number\" \n                            name=\"phone_number\" \n                            onChange={this.onChange}\n                        />\n                        </Form.Group>\n                    </Form.Row>\n\n                    <Form.Group controlId=\"formGridAddress1\">\n                        <Form.Label>Company Name</Form.Label>\n                        <Form.Control \n                            placeholder=\"Company Name\" \n                            name=\"company_name\" \n                            onChange={this.onChange}\n                        />\n                    </Form.Group>\n{/* \n                    <Form.Group controlId=\"formGridCompanyName\">\n                        <Form.Label>Address 2</Form.Label>\n                        <Form.Control placeholder=\"Apartment, studio, or floor\" />\n                    </Form.Group> */}\n{/* \n                    <Form.Row>\n                        <Form.Group as={Col} controlId=\"formGridCity\">\n                            <Form.Label>City</Form.Label>\n                            <Form.Control />\n                        </Form.Group>\n\n                        <Form.Group as={Col} controlId=\"formGridState\">\n                            <Form.Label>State</Form.Label>\n                            <Form.Control as=\"select\" value=\"Choose...\">\n                                <option>Choose...</option>\n                                <option>...</option>\n                            </Form.Control>\n                        </Form.Group>\n\n                        <Form.Group as={Col} controlId=\"formGridZip\">\n                            <Form.Label>Zip</Form.Label>\n                            <Form.Control />\n                        </Form.Group>\n                    </Form.Row> */}\n\n                    <Form.Group id=\"formGridCheckbox\">\n                        <Form.Check \n                        type=\"checkbox\" \n                        label=\"primary_al\" \n                        name=\"primary_al\" \n                        checked={this.state.primary_al}\n                        onChange={this.handleInputChange}\n                         />\n                    </Form.Group>\n                    <Form.Group id=\"formGridCheckbox\">\n                        <Form.Check type=\"checkbox\" label=\"Check me out\" />\n                    </Form.Group>\n                    <Form.Group id=\"formGridCheckbox\">\n                        <Form.Check type=\"checkbox\" label=\"Check me out\" />\n                    </Form.Group>\n\n\n                    <Button variant=\"primary\" type=\"submit\">\n                        Submit\n                    </Button>\n                </Form>\n            </div>\n        )\n    }\n}\n\nexport default UserForm;"]},"metadata":{},"sourceType":"module"}