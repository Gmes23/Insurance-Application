{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { InputText } from 'primereact/inputtext';\nimport { Growl } from 'primereact/growl';\nimport { Button } from 'primereact/button';\nimport Layout from '../components/Layout';\nexport class UserService {\n  getAllUsers() {\n    return fetch('http://localhost:4000/user', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(data => data); // .then((data) => {console.log(data)});\n  }\n\n}\n\nclass DataTableEditDemo2 extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      users: []\n    };\n    this.clonedUsers = {};\n    this.userservice = new UserService();\n    this.editorForRowEditing = this.editorForRowEditing.bind(this);\n    this.onRowEditorValidator = this.onRowEditorValidator.bind(this);\n    this.onRowEditInit = this.onRowEditInit.bind(this);\n    this.onRowEditSave = this.onRowEditSave.bind(this);\n    this.onRowEditCancel = this.onRowEditCancel.bind(this); //  Delete Method \n\n    this.actionTemplate = this.actionTemplate.bind(this);\n    this.handleDelete = this.handleDelete.bind(this); // Checks if what type of Liability User has\n\n    this.checkPrimaryAL = this.checkPrimaryAL.bind(this);\n    this.checkPrimaryEL = this.checkPrimaryEL.bind(this);\n    this.checkPrimaryGL = this.checkPrimaryGL.bind(this);\n  }\n\n  componentDidMount() {\n    this.userservice.getAllUsers().then(data => this.setState({\n      user: data\n    }));\n  }\n  /* Row Editing */\n\n\n  onEditorValueChangeForRowEditing(props, value) {\n    let updatedUsers = [...props.value];\n    updatedUsers[props.rowIndex][props.field] = value;\n    this.setState({\n      users: updatedUsers\n    });\n  }\n\n  editorForRowEditing(props, field) {\n    return __jsx(InputText, {\n      type: \"text\",\n      value: props.rowData[field],\n      onChange: e => this.onEditorValueChangeForRowEditing(props, e.target.value)\n    });\n  }\n\n  onRowEditorValidator(rowData) {\n    console.log(rowData, 'rowdataonroweditovalidto');\n    let value = rowData['first_name'];\n    return value.length > 0;\n  }\n\n  onRowEditInit(event) {\n    this.clonedUsers[event.data.vin] = _objectSpread({}, event.data);\n  }\n\n  onRowEditSave(event) {\n    if (this.onRowEditorValidator(event.data)) {\n      console.log(event.data.id, ' this event data ');\n      delete this.clonedUsers[event.data.vin];\n      fetch('http://localhost:4000/user/' + event.data.id, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(event.data)\n      }).then(response => response.json()).then(data => this.setState({\n        users: data\n      }));\n      this.growl.show({\n        severity: 'success',\n        summary: 'Success',\n        detail: 'Car is updated'\n      });\n    } else {\n      this.growl.show({\n        severity: 'error',\n        summary: 'Error',\n        detail: 'Brand is required'\n      });\n    }\n  }\n\n  onRowEditCancel(event) {\n    let users = [...this.state.users];\n    users[event.index] = this.clonedUsers[event.data.vin];\n    delete this.clonedUsers[event.data.vin];\n    this.setState({\n      users: users\n    });\n  } // These handle the Delete method \n\n\n  actionTemplate(rowData, column) {\n    return __jsx(\"div\", null, __jsx(Button, {\n      type: \"button\",\n      icon: \"pi pi-times\",\n      className: \"p-button-danger\",\n      style: {\n        marginRight: '.5em'\n      },\n      onClick: e => this.handleDelete(rowData, e)\n    }));\n  }\n\n  handleDelete(rowData, e) {\n    e.preventDefault();\n    const userId = rowData.id;\n    fetch('http://localhost:4000/user/' + userId, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(this.setState({\n      users: rowData\n    }));\n  } //  Ternary function for liabilities\n\n\n  checkPrimaryAL(rowData, column) {\n    console.log(rowData.primary_al, 'rowDAtaeqweq');\n    return rowData.primary_al ? __jsx(\"i\", {\n      className: \"pi pi-check\",\n      style: {\n        'fontSize': '3em',\n        'color': 'green'\n      }\n    }) : __jsx(\"i\", {\n      className: \"pi pi-times\",\n      style: {\n        'fontSize': '3em',\n        'color': 'crimson'\n      }\n    });\n  }\n\n  checkPrimaryEL(rowData, column) {\n    return rowData.primary_el ? __jsx(\"i\", {\n      className: \"pi pi-check\",\n      style: {\n        'fontSize': '3em',\n        'color': 'green'\n      }\n    }) : __jsx(\"i\", {\n      className: \"pi pi-times\",\n      style: {\n        'fontSize': '3em',\n        'color': 'crimson'\n      }\n    });\n  }\n\n  checkPrimaryGL(rowData, column) {\n    return rowData.primary_gl ? __jsx(\"i\", {\n      className: \"pi pi-check\",\n      style: {\n        'fontSize': '3em',\n        'color': 'green'\n      }\n    }) : __jsx(\"i\", {\n      className: \"pi pi-times\",\n      style: {\n        'fontSize': '3em',\n        'color': 'crimson'\n      }\n    });\n  }\n\n  render() {\n    console.log(this.state, 'this state');\n    return __jsx(Layout, null, __jsx(\"div\", null, __jsx(\"div\", {\n      className: \"content-section introduction\"\n    }, __jsx(\"div\", {\n      className: \"feature-intro\"\n    }, __jsx(\"h1\", null, \"DataTable - Edit\"), __jsx(\"p\", null, \"User Data\"))), __jsx(\"div\", {\n      className: \"content-section implementation\"\n    }, __jsx(Growl, {\n      ref: el => this.growl = el\n    }), __jsx(\"h3\", null, \"Applicant Table\"), __jsx(DataTable, {\n      value: this.state.user,\n      editMode: \"row\",\n      rowEditorValidator: this.onRowEditorValidator,\n      onRowEditInit: this.onRowEditInit,\n      onRowEditSave: this.onRowEditSave,\n      onRowEditCancel: this.onRowEditCancel\n    }, __jsx(Column, {\n      field: \"first_name\",\n      header: \"First Name\",\n      editor: props => this.editorForRowEditing(props, 'first_name'),\n      style: {\n        height: '3.5em'\n      }\n    }), __jsx(Column, {\n      field: \"last_name\",\n      header: \"Last Name\",\n      editor: props => this.editorForRowEditing(props, 'last_name'),\n      style: {\n        height: '3.5em'\n      }\n    }), __jsx(Column, {\n      field: \"email_address\",\n      header: \"Email Address\",\n      editor: props => this.editorForRowEditing(props, 'email_address'),\n      style: {\n        height: '3.5em'\n      }\n    }), __jsx(Column, {\n      field: \"phone_number\",\n      header: \"Phone Number\",\n      editor: props => this.editorForRowEditing(props, 'phone_number'),\n      style: {\n        height: '3.5em'\n      }\n    }), __jsx(Column, {\n      field: \"effective_date\",\n      header: \"Effective Date\",\n      editor: props => this.editorForRowEditing(props, 'effective_date'),\n      style: {\n        height: '3.5em'\n      }\n    }), __jsx(Column, {\n      field: \"status\",\n      header: \"Status\",\n      editor: props => this.editorForRowEditing(props, 'status'),\n      style: {\n        height: '3.5em'\n      }\n    }), __jsx(Column, {\n      field: \"primary_al\",\n      header: \"Auto Liability\",\n      body: this.checkPrimaryAL,\n      editor: props => this.editorForRowEditing(props, 'primary_al'),\n      style: {\n        height: '3.5em'\n      }\n    }), __jsx(Column, {\n      field: \"primary_gl\",\n      header: \"General Liability\",\n      body: this.checkPrimaryEL,\n      editor: props => this.editorForRowEditing(props, 'primary_gl'),\n      style: {\n        height: '3.5em'\n      }\n    }), __jsx(Column, {\n      field: \"primary_el\",\n      header: \"Primary Liability\",\n      body: this.checkPrimaryGL,\n      editor: props => this.editorForRowEditing(props, 'primary_el'),\n      style: {\n        height: '3.5em'\n      }\n    }), __jsx(Column, {\n      header: \"Delete Applicant\",\n      body: this.actionTemplate,\n      style: {\n        textAlign: 'center',\n        width: '8em'\n      }\n    }), __jsx(Column, {\n      header: \"Edit\",\n      rowEditor: true,\n      style: {\n        'width': '70px',\n        'textAlign': 'center'\n      }\n    })))));\n  }\n\n}\n\nexport default DataTableEditDemo2;","map":null,"metadata":{},"sourceType":"module"}