{"ast":null,"code":"var _jsxFileName = \"/Users/gm/Desktop/workFolder/client/pages/dashboardx.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { InputText } from 'primereact/inputtext';\nimport { Dropdown } from 'primereact/dropdown';\nimport { Growl } from 'primereact/growl'; // import {CarService} from '../service/CarService';\n\nexport class CarService {\n  getCarsSmall() {\n    return fetch('http://localhost:4000/user', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(data => data); // .then((data) => {console.log(data)});\n  }\n\n  getCarsMedium() {\n    return fetch('https://jsonplaceholder.typicode.com/todos/1').then(res => res.json);\n  }\n\n  getCarsLarge() {\n    return fetch('https://jsonplaceholder.typicode.com/todos/1').then(res => res.json);\n  }\n\n}\n\nclass DataTableEditDemo2 extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      cars1: null,\n      cars2: []\n    };\n    this.clonedCars = {};\n    this.carservice = new CarService();\n    this.vinEditor = this.vinEditor.bind(this);\n    this.yearEditor = this.yearEditor.bind(this);\n    this.brandEditor = this.brandEditor.bind(this);\n    this.colorEditor = this.colorEditor.bind(this);\n    this.requiredValidator = this.requiredValidator.bind(this);\n    this.editorForRowEditing = this.editorForRowEditing.bind(this);\n    this.onRowEditorValidator = this.onRowEditorValidator.bind(this);\n    this.onRowEditInit = this.onRowEditInit.bind(this);\n    this.onRowEditSave = this.onRowEditSave.bind(this);\n    this.onRowEditCancel = this.onRowEditCancel.bind(this);\n  }\n\n  componentDidMount() {\n    this.carservice.getCarsSmall().then(data => this.setState({\n      cars1: data\n    }));\n    this.carservice.getCarsSmall().then(data => this.setState({\n      cars2: data\n    }));\n  }\n  /* Cell Editing */\n\n\n  onEditorValueChange(props, value) {\n    let updatedCars = [...props.value];\n    updatedCars[props.rowIndex][props.field] = value;\n    this.setState({\n      cars1: updatedCars\n    });\n  }\n\n  inputTextEditor(props, field) {\n    return __jsx(InputText, {\n      type: \"text\",\n      value: props.rowData[field],\n      onChange: e => this.onEditorValueChange(props, e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 16\n      }\n    });\n  }\n\n  vinEditor(props) {\n    return this.inputTextEditor(props, 'vin');\n  }\n\n  yearEditor(props) {\n    return this.inputTextEditor(props, 'year');\n  }\n\n  brandEditor(props) {\n    let brands = [{\n      label: 'Audi',\n      value: 'Audi'\n    }, {\n      label: 'BMW',\n      value: 'BMW'\n    }, {\n      label: 'Fiat',\n      value: 'Fiat'\n    }, {\n      label: 'Ford',\n      value: 'Ford'\n    }, {\n      label: 'Honda',\n      value: 'Honda'\n    }, {\n      label: 'Jaguar',\n      value: 'Jaguar'\n    }, {\n      label: 'Mercedes',\n      value: 'Mercedes'\n    }, {\n      label: 'Renault',\n      value: 'Renault'\n    }, {\n      label: 'VW',\n      value: 'VW'\n    }, {\n      label: 'Volvo',\n      value: 'Volvo'\n    }];\n    return __jsx(Dropdown, {\n      value: props.value[props.rowIndex].brand,\n      options: brands,\n      onChange: e => this.onEditorValueChange(props, e.value),\n      style: {\n        width: '100%'\n      },\n      placeholder: \"Select a City\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    });\n  }\n\n  colorEditor(props) {\n    return this.inputTextEditor(props, 'color');\n  }\n\n  requiredValidator(props) {\n    let value = props.rowData[props.field];\n    return value && value.length > 0;\n  }\n  /* Row Editing */\n\n\n  onEditorValueChangeForRowEditing(props, value) {\n    let updatedCars = [...props.value];\n    updatedCars[props.rowIndex][props.field] = value;\n    this.setState({\n      cars2: updatedCars\n    });\n  }\n\n  editorForRowEditing(props, field) {\n    return __jsx(InputText, {\n      type: \"text\",\n      value: props.rowData[field],\n      onChange: e => this.onEditorValueChangeForRowEditing(props, e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 16\n      }\n    });\n  }\n\n  onRowEditorValidator(rowData) {\n    let value = rowData['brand'];\n    return value.length > 0;\n  }\n\n  onRowEditInit(event) {\n    this.clonedCars[event.data.vin] = _objectSpread({}, event.data);\n  }\n\n  onRowEditSave(event) {\n    if (this.onRowEditorValidator(event.data)) {\n      console.log(event.data, ' this event data ');\n      delete this.clonedCars[event.data.vin];\n      this.growl.show({\n        severity: 'success',\n        summary: 'Success',\n        detail: 'Car is updated'\n      });\n    } else {\n      this.growl.show({\n        severity: 'error',\n        summary: 'Error',\n        detail: 'Brand is required'\n      });\n    }\n  }\n\n  onRowEditCancel(event) {\n    let cars = [...this.state.cars2];\n    cars[event.index] = this.clonedCars[event.data.vin];\n    delete this.clonedCars[event.data.vin];\n    this.setState({\n      cars2: cars\n    });\n  }\n\n  render() {\n    console.log(this.state, 'this state');\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      className: \"content-section introduction\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      className: \"feature-intro\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 25\n      }\n    }, \"DataTable - Edit\"), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 25\n      }\n    }, \"Cell and Row editing provides a rapid and user friendly way to manipulate data.\"))), __jsx(\"div\", {\n      className: \"content-section implementation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }\n    }, __jsx(Growl, {\n      ref: el => this.growl = el,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }\n    }), __jsx(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 21\n      }\n    }, \"Row Editing\"), __jsx(DataTable, {\n      value: this.state.cars2,\n      editMode: \"row\",\n      rowEditorValidator: this.onRowEditorValidator,\n      onRowEditInit: this.onRowEditInit,\n      onRowEditSave: this.onRowEditSave,\n      onRowEditCancel: this.onRowEditCancel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }\n    }, __jsx(Column, {\n      field: \"first_name\",\n      header: \"Vin\",\n      style: {\n        height: '3.5em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 25\n      }\n    }), __jsx(Column, {\n      field: \"first_name\",\n      header: \"Year\",\n      editor: props => this.editorForRowEditing(props, 'year'),\n      style: {\n        height: '3.5em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 25\n      }\n    }), __jsx(Column, {\n      field: \"brand\",\n      header: \"Brand\",\n      editor: props => this.editorForRowEditing(props, 'brand'),\n      style: {\n        height: '3.5em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 25\n      }\n    }), __jsx(Column, {\n      field: \"color\",\n      header: \"Color\",\n      editor: props => this.editorForRowEditing(props, 'color'),\n      style: {\n        height: '3.5em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 25\n      }\n    }), __jsx(Column, {\n      rowEditor: true,\n      style: {\n        'width': '70px',\n        'textAlign': 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default DataTableEditDemo2;","map":{"version":3,"sources":["/Users/gm/Desktop/workFolder/client/pages/dashboardx.js"],"names":["DataTable","Column","InputText","Dropdown","Growl","CarService","getCarsSmall","fetch","method","headers","then","response","json","data","getCarsMedium","res","getCarsLarge","DataTableEditDemo2","React","Component","constructor","state","cars1","cars2","clonedCars","carservice","vinEditor","bind","yearEditor","brandEditor","colorEditor","requiredValidator","editorForRowEditing","onRowEditorValidator","onRowEditInit","onRowEditSave","onRowEditCancel","componentDidMount","setState","onEditorValueChange","props","value","updatedCars","rowIndex","field","inputTextEditor","rowData","e","target","brands","label","brand","width","length","onEditorValueChangeForRowEditing","event","vin","console","log","growl","show","severity","summary","detail","cars","index","render","el","height"],"mappings":"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","sourcesContent":["import {DataTable} from 'primereact/datatable';\nimport {Column} from 'primereact/column';\nimport {InputText} from 'primereact/inputtext';\nimport {Dropdown} from 'primereact/dropdown';\nimport {Growl} from 'primereact/growl';\n// import {CarService} from '../service/CarService';\n\nexport class CarService {\n\n    getCarsSmall() {\n        return fetch('http://localhost:4000/user', {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' }\n        })\n        .then(response => response.json())\n        .then(data => data);\n        // .then((data) => {console.log(data)});\n    }\n\n    getCarsMedium() {\n        return fetch('https://jsonplaceholder.typicode.com/todos/1')\n            .then(res => res.json);\n    }\n\n    getCarsLarge() {\n        return fetch('https://jsonplaceholder.typicode.com/todos/1')\n            .then(res => res.json);\n    }\n}\nclass DataTableEditDemo2 extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            cars1: null,\n            cars2: []\n        };\n        this.clonedCars = {};\n        this.carservice = new CarService();\n\n        this.vinEditor = this.vinEditor.bind(this);\n        this.yearEditor = this.yearEditor.bind(this);\n        this.brandEditor = this.brandEditor.bind(this);\n        this.colorEditor = this.colorEditor.bind(this);\n        this.requiredValidator = this.requiredValidator.bind(this);\n\n        this.editorForRowEditing = this.editorForRowEditing.bind(this);\n        this.onRowEditorValidator = this.onRowEditorValidator.bind(this);\n        this.onRowEditInit = this.onRowEditInit.bind(this);\n        this.onRowEditSave = this.onRowEditSave.bind(this);\n        this.onRowEditCancel = this.onRowEditCancel.bind(this);\n    }\n\n    componentDidMount() {\n        this.carservice.getCarsSmall().then(data => this.setState({cars1: data}));\n        this.carservice.getCarsSmall().then(data => this.setState({cars2: data}));\n    }\n\n    /* Cell Editing */\n    onEditorValueChange(props, value) {\n        let updatedCars = [...props.value];\n        updatedCars[props.rowIndex][props.field] = value;\n        this.setState({cars1: updatedCars});\n    }\n\n    inputTextEditor(props, field) {\n        return <InputText type=\"text\" value={props.rowData[field]} onChange={(e) => this.onEditorValueChange(props, e.target.value)} />;\n    }\n\n    vinEditor(props) {\n        return this.inputTextEditor(props, 'vin');\n    }\n\n    yearEditor(props) {\n        return this.inputTextEditor(props, 'year');\n    }\n\n    brandEditor(props) {\n        let brands = [\n            {label: 'Audi', value: 'Audi'},\n            {label: 'BMW', value: 'BMW'},\n            {label: 'Fiat', value: 'Fiat'},\n            {label: 'Ford', value: 'Ford'},\n            {label: 'Honda', value: 'Honda'},\n            {label: 'Jaguar', value: 'Jaguar'},\n            {label: 'Mercedes', value: 'Mercedes'},\n            {label: 'Renault', value: 'Renault'},\n            {label: 'VW', value: 'VW'},\n            {label: 'Volvo', value: 'Volvo'}\n        ];\n\n        return (\n            <Dropdown value={props.value[props.rowIndex].brand} options={brands}\n                    onChange={(e) => this.onEditorValueChange(props, e.value)} style={{width:'100%'}} placeholder=\"Select a City\"/>\n        );\n    }\n\n    colorEditor(props) {\n        return this.inputTextEditor(props, 'color');\n    }\n\n    requiredValidator(props) {\n        let value = props.rowData[props.field];\n        return value && value.length > 0;\n    }\n\n    /* Row Editing */\n    onEditorValueChangeForRowEditing(props, value) {\n        let updatedCars = [...props.value];\n        updatedCars[props.rowIndex][props.field] = value;\n        this.setState({cars2: updatedCars});\n    }\n\n    editorForRowEditing(props, field) {\n        return <InputText type=\"text\" value={props.rowData[field]} onChange={(e) => this.onEditorValueChangeForRowEditing(props, e.target.value)} />;\n    }\n\n    onRowEditorValidator(rowData) {\n        let value = rowData['brand'];\n        return value.length > 0;\n    }\n\n    onRowEditInit(event) {\n        this.clonedCars[event.data.vin] = {...event.data};\n    }\n\n    onRowEditSave(event) {\n        if (this.onRowEditorValidator(event.data)) {\n            console.log(event.data, ' this event data ')\n            delete this.clonedCars[event.data.vin];\n            this.growl.show({severity: 'success', summary: 'Success', detail: 'Car is updated'});\n        }\n        else {\n            this.growl.show({severity: 'error', summary: 'Error', detail: 'Brand is required'});\n        }\n    }\n\n    onRowEditCancel(event) {\n        let cars = [...this.state.cars2];\n        cars[event.index] = this.clonedCars[event.data.vin];\n        delete this.clonedCars[event.data.vin];\n        this.setState({\n            cars2: cars\n        })\n    }\n\n    render() {\n        console.log(this.state, 'this state')\n        return (\n            <div>\n                <div className=\"content-section introduction\">\n                    <div className=\"feature-intro\">\n                        <h1>DataTable - Edit</h1>\n                        <p>Cell and Row editing provides a rapid and user friendly way to manipulate data.</p>\n                    </div>\n                </div>\n\n                <div className=\"content-section implementation\">\n                    <Growl ref={(el) => this.growl = el} />\n\n                    {/* <h3>Cell Editing</h3>\n                    <DataTable value={this.state.cars1} editable={true}>\n                        <Column field=\"vin\" header=\"Vin\" editor={this.vinEditor} editorValidator={this.requiredValidator} style={{height: '3.5em'}}/>\n                        <Column field=\"year\" header=\"Year\" editor={this.yearEditor} style={{height: '3.5em'}}/>\n                        <Column field=\"brand\" header=\"Brand\" editor={this.brandEditor} style={{height: '3.5em'}}/>\n                        <Column field=\"color\" header=\"Color\" editor={this.colorEditor} style={{height: '3.5em'}}/>\n                    </DataTable> */}\n\n                    <h3>Row Editing</h3>\n                    <DataTable value={this.state.cars2} editMode=\"row\" rowEditorValidator={this.onRowEditorValidator} onRowEditInit={this.onRowEditInit} onRowEditSave={this.onRowEditSave} onRowEditCancel={this.onRowEditCancel}>\n                        <Column field=\"first_name\" header=\"Vin\" style={{height: '3.5em'}}/>\n                        <Column field=\"first_name\" header=\"Year\" editor={(props) => this.editorForRowEditing(props, 'year')} style={{height: '3.5em'}}/>\n                        <Column field=\"brand\" header=\"Brand\" editor={(props) => this.editorForRowEditing(props, 'brand')} style={{height: '3.5em'}}/>\n                        <Column field=\"color\" header=\"Color\" editor={(props) => this.editorForRowEditing(props, 'color')} style={{height: '3.5em'}}/>\n                        <Column rowEditor={true} style={{'width': '70px', 'textAlign': 'center'}}></Column>\n                    </DataTable>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DataTableEditDemo2;"]},"metadata":{},"sourceType":"module"}