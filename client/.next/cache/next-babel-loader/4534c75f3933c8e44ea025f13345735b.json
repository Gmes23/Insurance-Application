{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Form from 'react-bootstrap/Form';\nimport { Row, Col, Grid } from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button'; // const UserInfo = [\n//     {link: \"/\", name: \"Program\"},\n//     {link: \"/info\", name: \"Info\"},\n//     {link: \"/booking\", name: \"Booking\"},\n//     {link: \"/FAQ\", name: \"FAQ\"},\n//     {link: \"/contact\", name: \"Contact\"},\n//   ]\n//   const UILink = ({link, name}) => \n//     <LI_list>\n//       <Alink to={link} onClick={this.toggleExpandedMenu}> {name} </Alink> <Span />\n//     </LI_list>\n//   const UILinkContainer = () => routes.map(UILink)\n\nvar UserForm = /*#__PURE__*/function (_React$Component) {\n  _inherits(UserForm, _React$Component);\n\n  var _super = _createSuper(UserForm);\n\n  function UserForm(props) {\n    var _this;\n\n    _classCallCheck(this, UserForm);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      first_name: '',\n      last_name: '',\n      email_address: '',\n      phone_number: '',\n      company_name: '',\n      effective_date: 'string',\n      status: 'pending',\n      primary_al: false,\n      primary_gl: false,\n      primary_el: false,\n      isDeleted: false\n    };\n    _this.onChange = _this.onChange.bind(_assertThisInitialized(_this));\n    _this.handleFormSubmit = _this.handleFormSubmit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(UserForm, [{\n    key: \"onChange\",\n    value: function onChange(e) {\n      var booleanTargetNames = [\"primary_al\", \"primary_gl\", \"primary_el\"];\n      var target = e.target; // If this a boolean target (checkbox toggle) return it's \"checked\" property\n      // Else it's a regular input so we should read the \"value\" property\n\n      var value = booleanTargetNames.includes(target.name) ? target.checked : target.value;\n      var name = target.name;\n      this.setState(_defineProperty({}, name, value));\n      console.log(this.state, 'state of user form');\n    }\n  }, {\n    key: \"handleFormSubmit\",\n    value: function handleFormSubmit(e) {\n      e.preventDefault();\n      var data = this.state;\n      var requestOptions = {\n        credentials: 'include',\n        method: 'POST',\n        mode: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          data: data\n        })\n      };\n      fetch('http://localhost:4000/user', requestOptions).then(function (response) {\n        return response.json();\n      })[\"catch\"](function (error) {\n        return console.error('Error:', error);\n      }).then(function (response) {\n        return console.log('succes', response);\n      });\n      console.log(data, \"handleFormSubmit\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", null, __jsx(Form, {\n        onSubmit: this.handleFormSubmit\n      }, __jsx(Form.Row, null, __jsx(Form.Group, {\n        as: Col,\n        controlId: \"formGridName\"\n      }, __jsx(Form.Label, null, \"First Name\"), __jsx(Form.Control, {\n        type: \"name\",\n        placeholder: \"First Name\",\n        name: \"first_name\",\n        onChange: this.onChange\n      })), __jsx(Form.Group, {\n        as: Col,\n        controlId: \"formGridLastName\"\n      }, __jsx(Form.Label, null, \"Last Name\"), __jsx(Form.Control, {\n        type: \"lastName\",\n        placeholder: \"Last name\",\n        name: \"last_name\",\n        onChange: this.onChange\n      }))), __jsx(Form.Row, null, __jsx(Form.Group, {\n        as: Col,\n        controlId: \"formGridEmail\"\n      }, __jsx(Form.Label, null, \"Email\"), __jsx(Form.Control, {\n        type: \"email\",\n        placeholder: \"Enter email\",\n        name: \"email_address\",\n        onChange: this.onChange\n      })), __jsx(Form.Group, {\n        as: Col,\n        controlId: \"formGridPhoneNumber\"\n      }, __jsx(Form.Label, null, \"Phone Number\"), __jsx(Form.Control, {\n        type: \"phone_number\",\n        placeholder: \"Phone number\",\n        name: \"phone_number\",\n        onChange: this.onChange\n      }))), __jsx(Form.Group, {\n        controlId: \"formGridAddress1\"\n      }, __jsx(Form.Label, null, \"Company Name\"), __jsx(Form.Control, {\n        placeholder: \"Company Name\",\n        name: \"company_name\",\n        onChange: this.onChange\n      })), __jsx(Form.Group, {\n        id: \"formGridCheckbox\"\n      }, __jsx(Form.Check, {\n        type: \"checkbox\",\n        label: \"primary_al\",\n        name: \"primary_al\",\n        checked: this.state.primary_al,\n        onChange: this.onChange\n      })), __jsx(Form.Group, {\n        id: \"formGridCheckbox\"\n      }, __jsx(Form.Check, {\n        type: \"checkbox\",\n        label: \"primary_gl\",\n        name: \"primary_gl\",\n        checked: this.state.primary_gl,\n        onChange: this.onChange\n      })), __jsx(Form.Group, {\n        id: \"formGridCheckbox\"\n      }, __jsx(Form.Check, {\n        type: \"checkbox\",\n        label: \"primary_el\",\n        name: \"primary_el\",\n        checked: this.state.primary_el,\n        onChange: this.onChange\n      })), __jsx(Button, {\n        variant: \"primary\",\n        type: \"submit\"\n      }, \"Submit\")));\n    }\n  }]);\n\n  return UserForm;\n}(React.Component);\n\nexport default UserForm;","map":null,"metadata":{},"sourceType":"module"}